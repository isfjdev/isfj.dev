<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on isfj.dev</title><link>https://isfj.dev/posts/</link><description>Recent content in Posts on isfj.dev</description><generator>Hugo 0.125.0</generator><language>en-us</language><copyright>Â© 2025 by isfj.dev. All rights reserved.</copyright><lastBuildDate>Tue, 29 Apr 2025 07:16:22 +0700</lastBuildDate><atom:link href="https://isfj.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>PostgreSQL Partitioning: Native vs Inheritance + Trigger</title><link>https://isfj.dev/posts/postgresql-partitioning-native-vs-inheritance-trigger/</link><pubDate>Tue, 29 Apr 2025 07:16:22 +0700</pubDate><guid>https://isfj.dev/posts/postgresql-partitioning-native-vs-inheritance-trigger/</guid><description>Partitioning is a powerful technique in PostgreSQL to handle large-scale datasets. It can significantly improve query performance, data maintenance, and scalability.
But which method should you choose: Native Partitioning or the older Inheritance + Trigger approach?
This article dives into both techniques, comparing their mechanics, pros and cons, and real-world applicability to help you make an informed decision.
What is partitioning and why does it matter? Partitioning is the process of splitting a large table into smaller, more manageable pieces called partitions.</description></item></channel></rss>